package KnapSack;

public class knapsack01 {

    public static void main(String[] args) {
        int val[] = new int[]{12, 10, 20, 15};
        int wt[] = new int[]{2, 1, 3, 2};
        int W = 5;
        int n = val.length;
        System.out.println(KnapSack01(W, wt, val, n));
        
    }

    static int KnapSack01(int W, int wt[], int val[], int n) {
        int p[][] = new int[n + 1][W + 1];
        for (int w = 0; w <= W; w++) {
            p[0][w] = 0;
        }
        for (int i = 0; i <= n; i++) {
            if (i == 0) {
                p[i][0] = 0;
            } else {
                for (int w = 0; w <= W; w++) {
                    if (wt[i - 1] <= w) {                                       //wt[] & val[] te o index e item 1 chilo
                        if (val[i - 1] + p[i - 1][w - wt[i - 1]] > p[i - 1][w]) {
                            p[i][w] = val[i - 1] + p[i - 1][w - wt[i - 1]];
                        } else {
                            p[i][w] = p[i - 1][w];
                        }
                    } else {
                        p[i][w] = p[i - 1][w];
                    }
                }
            }
        }
        //return p[n][w];   //only for 01Knapsack
        
        //order of Knapsack problem
        System.out.println("Order: ");
        int w = W; 
        int current = p[n][W];
        for (int i = n; i > 0 ; i--) { 
            if (current == p[i - 1][w]) 
                continue; 
            else { 
                System.out.print(i + " ");
                current = current - val[i - 1]; 
                w = w - wt[i - 1]; 
            } 
        } 
        System.out.println("\nResult: ");
        return p[n][W];
    }
}
