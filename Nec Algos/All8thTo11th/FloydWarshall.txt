
package FloydWarshall;

/**
 *
 * @author Shouhag Roy
 */ 
  
  
class ShortestPathsAllPairs 
{ 
    final static int INF = 99999;
    final static int V = 4; 
  
    void floydWarshall(int matrix[][]) 
    { 
        int dist[][] = new int[V][V]; 
        int i, j, k; 
        
        for (i = 0; i < V; i++) {
            for (j = 0; j < V; j++){ 
                dist[i][j] = matrix[i][j];
            }
        }
        
        
        for (k = 0; k < V; k++) 
        { 
            for (i = 0; i < V; i++) 
            { 
                for (j = 0; j < V; j++) 
                { 
                    if (dist[i][k] + dist[k][j] < dist[i][j]) {
                        dist[i][j] = dist[i][k] + dist[k][j]; 
                    }
                } 
            } 
        } 
        
        printSolution(dist); 
    } 
  
    void printSolution(int dist[][]) 
    { 
        System.out.println("All Pair Shortest Distances : "); 
        for (int i=0; i<V; ++i) 
        { 
            for (int j=0; j<V; ++j) 
            { 
                if (dist[i][j]==INF) 
                    System.out.print("INF "); 
                else
                    System.out.print(dist[i][j]+"   "); 
            } 
            System.out.println(); 
        } 
    } 

    public static void main (String[] args) 
    { 
        int matrix[][] = { {0,   10,  INF, 5},{INF, 0,   5, INF}, {INF, INF, 0,   1}, {INF, INF, INF, 0} }; 
        ShortestPathsAllPairs fW = new ShortestPathsAllPairs(); 
  
        fW.floydWarshall(matrix); 
    } 
} 
